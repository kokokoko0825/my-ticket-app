import { useState, useEffect, useRef } from "react";
import { useNavigate } from "@remix-run/react";
import type { MetaFunction } from "@remix-run/node";
import { Html5QrcodeScanner } from "html5-qrcode";
// import { doc, getDoc, setDoc, Timestamp } from "firebase/firestore";
// import { db } from "../root";

export const meta: MetaFunction = () => {
  return [
    { charSet: "utf-8"},
    { title: "QR„Ç≥„Éº„ÉâË™≠„ÅøÂèñ„Çä - „ÉÅ„Ç±„ÉÉ„ÉàÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†" },
    { name: "description", content: "QR„Ç≥„Éº„Éâ„Çí„Çπ„Ç≠„É£„É≥„Åó„Å¶„ÉÅ„Ç±„ÉÉ„ÉàÊÉÖÂ†±„ÇíÁ¢∫Ë™ç" },
  ];
};

interface RedirectResult {
  success: boolean;
  message: string;
}

export default function QRReader() {
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [scanner, setScanner] = useState<Html5QrcodeScanner | null>(null);
  const [redirectResult, setRedirectResult] = useState<RedirectResult | null>(null);
  const [processing, setProcessing] = useState(false);
  const [countdown, setCountdown] = useState<number | null>(null);
  const scannerRef = useRef<HTMLDivElement>(null);
  const navigate = useNavigate();

  // QR„Çπ„Ç≠„É£„Éä„Éº„ÇíÈñãÂßã„Åô„ÇãÈñ¢Êï∞
  const startScanner = async () => {
    // DOMË¶ÅÁ¥†„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    const container = document.getElementById("qr-reader-container");
    if (!container) {
      console.error("QR reader container not found");
      setError("„Çπ„Ç≠„É£„Éä„Éº„Ç≥„É≥„ÉÜ„Éä„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
      return;
    }

    try {
      setError(null);
      setIsScanning(true);

      const qrScanner = new Html5QrcodeScanner(
        "qr-reader-container",
        {
          fps: 10,
          qrbox: { width: 250, height: 250 },
          aspectRatio: 1.0,
          rememberLastUsedCamera: true,
          experimentalFeatures: {
            useBarCodeDetectorIfSupported: true
          }
        },
        /* verbose= */ false
      );

      // ÊàêÂäü„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
      const qrCodeSuccessCallback = (decodedText: string) => {
        console.log(`QR Code detected: ${decodedText}`);
        handleScanResult(decodedText);
        // „Çπ„Ç≠„É£„É≥ÊàêÂäüÂæå„Å´„Çπ„Ç≠„É£„Éä„Éº„Çí„ÇØ„É™„Ç¢
        qrScanner.clear().catch(console.error);
      };

      // „Ç®„É©„Éº„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶Âá¶ÁêÜÔºâ
      const qrCodeErrorCallback = (errorMessage: string) => {
        // ÈÄöÂ∏∏„ÅÆ„Çπ„Ç≠„É£„É≥„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñÔºà„Ç´„É°„É©„Åå‰Ωï„ÇÇÊ§úÂá∫„Åó„Å™„ÅÑÂ†¥Âêà„Å™„Å©Ôºâ
        if (!errorMessage.includes("QR code parse error")) {
          console.warn("QR scan error:", errorMessage);
        }
      };

      // „Çπ„Ç≠„É£„Éä„Éº„Çí„É¨„É≥„ÉÄ„É™„É≥„Ç∞
      await qrScanner.render(qrCodeSuccessCallback, qrCodeErrorCallback);
      setScanner(qrScanner);

    } catch (err) {
      console.error("QR Scanner initialization error:", err);
      let errorMsg = "QR„Çπ„Ç≠„É£„Éä„Éº„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ";
      
      if (err instanceof Error) {
        if (err.message.includes("Permission")) {
          errorMsg = "„Ç´„É°„É©„ÅÆ‰ΩøÁî®Ë®±ÂèØ„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ„Éñ„É©„Ç¶„Ç∂„ÅÆË®≠ÂÆö„Åß„Ç´„É°„É©„ÇíË®±ÂèØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
        } else if (err.message.includes("NotFound")) {
          errorMsg = "„Ç´„É°„É©„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Éá„Éê„Ç§„Çπ„Å´„Ç´„É°„É©„ÅåÊé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
        } else if (err.message.includes("NotSupported")) {
          errorMsg = "„Åì„ÅÆ„Éñ„É©„Ç¶„Ç∂„Åß„ÅØQR„Çπ„Ç≠„É£„É≥Ê©üËÉΩ„Åå„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ";
        }
      }
      
      setError(errorMsg);
      setIsScanning(false);
    }
  };

  // „Çπ„Ç≠„É£„Éä„Éº„ÇíÂÅúÊ≠¢„Åô„ÇãÈñ¢Êï∞
  const stopScanner = () => {
    if (scanner) {
      scanner.clear().catch((err) => console.error("Error clearing scanner:", err));
      setScanner(null);
    }
    setIsScanning(false);
  };



  // QR„Ç≥„Éº„Éâ„Åã„Çâ„ÉÅ„Ç±„ÉÉ„Éà„Éö„Éº„Ç∏„ÅÆ„Éë„Çπ„ÇíÊäΩÂá∫„Åó„Å¶ÈÅ∑Áßª„Åô„Çã
  const redirectToTicketPage = (ticketUrl: string): boolean => {
    try {
      const url = new URL(ticketUrl);
      const pathname = url.pathname;
      
      // URL„Éë„Çπ„Åã„Çâ„Éë„É©„É°„Éº„Çø„ÇíÊäΩÂá∫
      const pathParts = pathname.split('/').filter(Boolean);
      
      if (pathParts[0] !== 'ticket') {
        console.log("‚ùå „ÉÅ„Ç±„ÉÉ„ÉàURL‰ª•Â§ñ„ÅÆQR„Ç≥„Éº„Éâ„Åß„Åô");
        return false;
      }

      console.log(`üîç „ÉÅ„Ç±„ÉÉ„ÉàURLÊ§úÂá∫: ${pathname}`);

      // „Éë„Çπ„Çí„Åù„ÅÆ„Åæ„Åæ‰Ωø„Å£„Å¶„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
      navigate(pathname);
      return true;

    } catch (error) {
      console.error("URLËß£Êûê„Ç®„É©„Éº:", error);
      return false;
    }
  };

  // „Çπ„Ç≠„É£„É≥ÁµêÊûú„ÇíÂá¶ÁêÜ„Åô„ÇãÈñ¢Êï∞
  const handleScanResult = (data: string) => {
    setIsScanning(false);
    setProcessing(true);
    stopScanner();

    console.log("üì± QR„Ç≥„Éº„ÉâË™≠„ÅøÂèñ„ÇäÂÆå‰∫Ü:", data);

    try {
      // „ÉÅ„Ç±„ÉÉ„ÉàURL„ÅÆÂ†¥Âêà„ÅØ„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
      if (data.startsWith('http') && data.includes('/ticket/')) {
        const success = redirectToTicketPage(data);
        
        if (success) {
          console.log("‚úÖ „ÉÅ„Ç±„ÉÉ„Éà„Éö„Éº„Ç∏„Å´ÈÅ∑Áßª‰∏≠...");
          // „É™„ÉÄ„Ç§„É¨„ÇØ„Éà„ÅåÊàêÂäü„Åó„ÅüÂ†¥Âêà„ÄÅÂá¶ÁêÜÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åó„Å¶Âç≥Â∫ß„Å´ÈÅ∑Áßª
          setRedirectResult({ 
            success: true, 
            message: "„ÉÅ„Ç±„ÉÉ„Éà„Éö„Éº„Ç∏„Å´ÁßªÂãï„Åó„Åæ„Åô..." 
          });
          return; // Âç≥Â∫ß„Å´ÈÅ∑Áßª„Åô„Çã„Åü„ÇÅ„ÄÅ‰ª•Èôç„ÅÆÂá¶ÁêÜ„ÅØ‰∏çË¶Å
        } else {
          // „É™„ÉÄ„Ç§„É¨„ÇØ„Éà„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà
          setRedirectResult({ 
            success: false, 
            message: "ÁÑ°Âäπ„Å™„ÉÅ„Ç±„ÉÉ„ÉàQR„Ç≥„Éº„Éâ„Åß„Åô„ÄÇÊ≠£„Åó„ÅÑ„ÉÅ„Ç±„ÉÉ„Éà„Çí„Çπ„Ç≠„É£„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" 
          });
        }
      } else {
        // „ÉÅ„Ç±„ÉÉ„ÉàURL‰ª•Â§ñ„ÅÆÂ†¥Âêà
        setRedirectResult({ 
          success: false, 
          message: "„Åì„Çå„ÅØ„ÉÅ„Ç±„ÉÉ„Éà„ÅÆQR„Ç≥„Éº„Éâ„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÊ≠£„Åó„ÅÑ„ÉÅ„Ç±„ÉÉ„Éà„Çí„Çπ„Ç≠„É£„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" 
        });
      }

      // „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØ3ÁßíÂæå„Å´„Éõ„Éº„É†„Éö„Éº„Ç∏„Å´ÈÅ∑Áßª
      setCountdown(3);
      const countdownInterval = setInterval(() => {
        setCountdown(prev => {
          if (prev === null || prev <= 1) {
            clearInterval(countdownInterval);
            navigate('/');
            return null;
          }
          return prev - 1;
        });
      }, 1000);

    } catch (error) {
      console.error("QR„Ç≥„Éº„ÉâÂá¶ÁêÜ„Ç®„É©„Éº:", error);
      setRedirectResult({ 
        success: false, 
        message: "QR„Ç≥„Éº„Éâ„ÅÆÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ" 
      });
      
      // „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØ3ÁßíÂæå„Å´„Éõ„Éº„É†„Éö„Éº„Ç∏„Å´ÈÅ∑Áßª
      setCountdown(3);
      const countdownInterval = setInterval(() => {
        setCountdown(prev => {
          if (prev === null || prev <= 1) {
            clearInterval(countdownInterval);
            navigate('/');
            return null;
          }
          return prev - 1;
        });
      }, 1000);
    }
  };

  // „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´Ëá™Âãï„Åß„Çπ„Ç≠„É£„Éä„Éº„ÇíÈñãÂßã
  useEffect(() => {
    let isMounted = true;
    
    // DOM„ÅÆÊ∫ñÂÇô„Å®„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Éû„Ç¶„É≥„Éà„ÇíÂæÖ„Å§
    const timer = setTimeout(async () => {
      if (isMounted) {
        await startScanner();
      }
    }, 500); // Â∞ë„ÅóÈï∑„ÇÅ„ÅÆÈÅÖÂª∂„ÅßDOM„ÅÆÊ∫ñÂÇô„ÇíÁ¢∫ÂÆü„Å´ÂæÖ„Å§
    
    return () => {
      isMounted = false;
      clearTimeout(timer);
      if (scanner) {
        scanner.clear().catch((err) => console.error("Error clearing scanner:", err));
      }
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  // „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Ç¢„É≥„Éû„Ç¶„É≥„ÉàÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  useEffect(() => {
    return () => {
      if (scanner) {
        scanner.clear().catch((err) => console.error("Error clearing scanner:", err));
      }
    };
  }, [scanner]);

  return (
    <div style={{
      minHeight: '100vh',
      backgroundColor: '#f5f5f5',
      fontFamily: "'Roboto', 'Helvetica', 'Arial', sans-serif"
    }}>
      <style>{`
        .qr-header {
          background: linear-gradient(135deg, #388e3c, #2e7d32);
          color: white;
          padding: 12px 16px;
          box-shadow: 0 2px 8px rgba(0,0,0,0.1);
          margin-bottom: 16px;
        }
        @media (min-width: 600px) {
          .qr-header {
            padding: 16px 24px;
            margin-bottom: 24px;
          }
        }
        .qr-nav {
          display: flex;
          align-items: center;
          justify-content: space-between;
          flex-wrap: wrap;
          gap: 8px;
        }
        .qr-title {
          font-size: 18px;
          font-weight: 600;
          margin: 0;
          flex: 1;
          min-width: 0;
        }
        @media (min-width: 600px) {
          .qr-title {
            font-size: 24px;
          }
        }
        .back-btn {
          background: transparent;
          border: 2px solid white;
          color: white;
          padding: 6px 12px;
          border-radius: 8px;
          cursor: pointer;
          font-size: 12px;
          font-weight: 500;
          transition: all 0.2s;
          display: flex;
          align-items: center;
          gap: 4px;
          min-height: 36px;
          touch-action: manipulation;
        }
        @media (min-width: 600px) {
          .back-btn {
            padding: 8px 16px;
            font-size: 14px;
            gap: 8px;
          }
        }
        .back-btn:hover {
          background: white;
          color: #388e3c;
        }
        .camera-container {
          max-width: 600px;
          margin: 0 auto;
          padding: 0 16px;
        }
        @media (min-width: 600px) {
          .camera-container {
            padding: 0 24px;
          }
        }
        .camera-card {
          background: white;
          border-radius: 12px;
          box-shadow: 0 4px 16px rgba(0,0,0,0.1);
          overflow: hidden;
          margin-bottom: 16px;
        }
        @media (min-width: 600px) {
          .camera-card {
            margin-bottom: 24px;
          }
        }
        #qr-reader-container {
          min-height: 280px;
          width: 100%;
          background: #f8f9fa;
          border-radius: 12px;
          overflow: hidden;
          position: relative;
        }
        
        @media (min-width: 600px) {
          #qr-reader-container {
            min-height: 400px;
            border-radius: 16px;
          }
        }
        
        #qr-reader-container video {
          width: 100% !important;
          height: auto !important;
          max-width: 100% !important;
          border-radius: inherit;
          object-fit: cover;
        }
        
        #qr-reader-container canvas {
          border-radius: inherit;
        }
        
        /* QR„Çπ„Ç≠„É£„Éä„Éº„ÅÆÊû†Á∑ö„Çπ„Çø„Ç§„É´ÊîπÂñÑ */
        #qr-reader-container > div {
          border-radius: inherit !important;
        }
        
        /* html5-qrcode „ÅÆ„Éú„Çø„É≥„Çπ„Çø„Ç§„É´ÊîπÂñÑ */
        #qr-reader-container button {
          background: linear-gradient(135deg, #1976d2, #1565c0) !important;
          border: none !important;
          border-radius: 12px !important;
          color: white !important;
          font-weight: 600 !important;
          padding: 12px 20px !important;
          margin: 8px 4px !important;
          transition: all 0.2s ease !important;
          min-height: 44px !important;
        }
        
        #qr-reader-container button:hover {
          transform: translateY(-1px) !important;
          box-shadow: 0 4px 12px rgba(25, 118, 210, 0.3) !important;
        }
        .camera-controls {
          padding: 16px;
          text-align: center;
        }
        @media (min-width: 600px) {
          .camera-controls {
            padding: 24px;
          }
        }
        .control-btn {
          padding: 12px 24px;
          border: none;
          border-radius: 8px;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
          margin: 4px;
          transition: all 0.2s;
          min-height: 48px;
          touch-action: manipulation;
        }
        @media (min-width: 600px) {
          .control-btn {
            padding: 16px 32px;
            margin: 0 8px;
          }
        }
        .stop-btn {
          background: #d32f2f;
          color: white;
        }
        .stop-btn:hover {
          background: #c62828;
        }
        .error-card {
          background: #ffebee;
          border: 1px solid #ef5350;
          border-radius: 8px;
          padding: 16px;
          margin-bottom: 24px;
          color: #c62828;
        }
        .info-card {
          background: white;
          border-radius: 12px;
          box-shadow: 0 4px 16px rgba(0,0,0,0.1);
          padding: 16px;
          margin-bottom: 16px;
        }
        @media (min-width: 600px) {
          .info-card {
            padding: 24px;
            margin-bottom: 24px;
          }
        }
        .result-card {
          background: white;
          border-radius: 12px;
          box-shadow: 0 6px 20px rgba(0,0,0,0.15);
          margin-bottom: 16px;
          overflow: hidden;
          border-left: 6px solid #2e7d32;
        }
        @media (min-width: 600px) {
          .result-card {
            margin-bottom: 24px;
          }
        }
        .result-card.error {
          border-left-color: #d32f2f;
        }
        .result-header {
          background: linear-gradient(135deg, #f8f9fa, #e9ecef);
          padding: 16px;
          border-bottom: 1px solid #e0e0e0;
        }
        @media (min-width: 600px) {
          .result-header {
            padding: 24px;
          }
        }
        .result-content {
          padding: 16px;
        }
        @media (min-width: 600px) {
          .result-content {
            padding: 24px;
          }
        }
        .overlay {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0, 0, 0, 0.7);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
          padding: 16px;
        }
        @media (min-width: 600px) {
          .overlay {
            padding: 24px;
          }
        }
        .overlay-content {
          background: white;
          border-radius: 16px;
          box-shadow: 0 10px 30px rgba(0,0,0,0.3);
          max-width: 500px;
          width: 100%;
          max-height: 80vh;
          overflow-y: auto;
          position: relative;
          animation: slideIn 0.3s ease-out;
        }
        @keyframes slideIn {
          from {
            opacity: 0;
            transform: translateY(-50px) scale(0.9);
          }
          to {
            opacity: 1;
            transform: translateY(0) scale(1);
          }
        }
        .overlay-header {
          padding: 16px 16px 12px 16px;
          border-bottom: 1px solid #e0e0e0;
          position: relative;
        }
        @media (min-width: 600px) {
          .overlay-header {
            padding: 24px 24px 16px 24px;
          }
        }
        .overlay-body {
          padding: 16px;
        }
        @media (min-width: 600px) {
          .overlay-body {
            padding: 24px;
          }
        }
        .scanning-indicator {
          text-align: center;
          padding: 16px 20px;
          background: linear-gradient(135deg, #e8f5e8, #c8e6c9);
          border-radius: 16px;
          margin-bottom: 16px;
          color: #1b5e20;
          font-weight: 600;
          box-shadow: 0 2px 8px rgba(76, 175, 80, 0.15);
          position: relative;
          overflow: hidden;
        }
        
        .scanning-indicator::before {
          content: '';
          position: absolute;
          top: 0;
          left: -100%;
          width: 100%;
          height: 100%;
          background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
          animation: scanning-animation 2s infinite;
        }
        
        @keyframes scanning-animation {
          0% { left: -100%; }
          100% { left: 100%; }
        }
        
        @media (min-width: 600px) {
          .scanning-indicator {
            border-radius: 12px;
            padding: 18px 24px;
          }
        }
      `}</style>

      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <div className="qr-header">
        <div className="qr-nav">
          <button 
            className="back-btn"
            onClick={() => navigate('/')}
          >
            ‚Üê Êàª„Çã
          </button>
          <h1 className="qr-title">üé´ QR„Ç≥„Éº„Éâ„É™„Éº„ÉÄ„Éº</h1>
          <div></div>
        </div>
      </div>

      <div className="camera-container">
        {/* „Ç®„É©„ÉºË°®Á§∫ */}
        {error && (
          <div className="error-card">
            <div style={{ marginBottom: '16px' }}>
              ‚ö†Ô∏è {error}
            </div>
            <button 
              className="control-btn"
              onClick={() => {
                setError(null);
                startScanner();
              }}
              style={{ 
                background: '#1976d2',
                color: 'white',
                padding: '12px 24px',
                fontSize: '14px'
              }}
            >
              üîÑ ÂÜçË©¶Ë°å
            </button>
          </div>
        )}

        {/* „Çπ„Ç≠„É£„É≥‰∏≠„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº */}
        {isScanning && !error && !processing && !redirectResult && (
          <div className="scanning-indicator">
            üì∏ „ÉÅ„Ç±„ÉÉ„Éà„Çí„Çπ„Ç≠„É£„É≥‰∏≠... QR„Ç≥„Éº„Éâ„Çí„Ç´„É°„É©„Å´Âêë„Åë„Å¶„Åè„Å†„Åï„ÅÑ
          </div>
        )}

        {/* ÂàùÊúüÂåñ‰∏≠„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº */}
        {!isScanning && !error && !processing && !redirectResult && (
          <div className="scanning-indicator">
            üîÑ QR„Ç≥„Éº„Éâ„É™„Éº„ÉÄ„Éº„ÇíÂàùÊúüÂåñ‰∏≠...
          </div>
        )}

        {/* Âá¶ÁêÜ‰∏≠„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº */}
        {processing && (
          <div className="scanning-indicator" style={{ background: '#fff3cd', color: '#856404' }}>
            ‚è≥ QR„Ç≥„Éº„Éâ„ÇíÂá¶ÁêÜ‰∏≠... „Åó„Å∞„Çâ„Åè„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ
          </div>
        )}

        {/* QR„Çπ„Ç≠„É£„Éä„Éº */}
        <div className="camera-card">
          {!isScanning && !error && (
            <div style={{
              padding: '24px',
              textAlign: 'center',
              background: 'linear-gradient(135deg, #e3f2fd, #bbdefb)',
              color: '#0d47a1',
              borderRadius: '12px',
              margin: '0 0 16px 0'
            }}>
              <div style={{ fontSize: '32px', marginBottom: '12px' }}>üì±</div>
              <h3 style={{ margin: '0 0 8px 0', fontSize: '16px', fontWeight: '600' }}>
                QR„Ç≥„Éº„Éâ„Çπ„Ç≠„É£„É≥Ê∫ñÂÇô‰∏≠
              </h3>
              <p style={{ margin: 0, fontSize: '14px', opacity: 0.8 }}>
                „Ç´„É°„É©„ÅÆ‰ΩøÁî®Ë®±ÂèØ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ
              </p>
            </div>
          )}
          
          <div 
            id="qr-reader-container"
            ref={scannerRef}
            style={{ width: '100%' }}
          />
          
          {isScanning && (
            <>
              <div style={{
                padding: '16px 20px',
                background: '#f8f9fa',
                borderTop: '1px solid #e1e5e9',
                textAlign: 'center'
              }}>
                <p style={{ 
                  margin: '0 0 8px 0', 
                  fontSize: '14px', 
                  color: '#1976d2',
                  fontWeight: '600'
                }}>
                  üì∏ QR„Ç≥„Éº„Éâ„Çí„Ç´„É°„É©„ÅÆ‰∏≠Â§Æ„Å´Âêà„Çè„Åõ„Å¶„Åè„Å†„Åï„ÅÑ
                </p>
                <p style={{ 
                  margin: 0, 
                  fontSize: '12px', 
                  color: '#757575' 
                }}>
                  „ÉÅ„Ç±„ÉÉ„Éà„ÅÆQR„Ç≥„Éº„Éâ„ÅåËá™ÂãïÁöÑ„Å´Ë™çË≠ò„Åï„Çå„Åæ„Åô
                </p>
              </div>
              
              <div className="camera-controls">
                <button 
                  className="control-btn stop-btn"
                  onClick={stopScanner}
                >
                  ‚èπÔ∏è „Çπ„Ç≠„É£„É≥ÂÅúÊ≠¢
                </button>
              </div>
            </>
          )}
        </div>

        {/* „É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÁµêÊûú„Ç™„Éº„Éê„Éº„É¨„Ç§ */}
        {redirectResult && (
          <div className="overlay">
            <div className="overlay-content">
              <div className="overlay-header">
                {redirectResult.success ? (
                  <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                    <div style={{ 
                      fontSize: '48px',
                      background: 'linear-gradient(135deg, #4caf50, #2e7d32)',
                      borderRadius: '50%',
                      padding: '16px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center'
                    }}>
                      ‚úÖ
                    </div>
                    <div>
                      <h2 style={{ 
                        margin: 0, 
                        color: '#2e7d32', 
                        fontSize: '28px',
                        fontWeight: 'bold'
                      }}>
                        „É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÊàêÂäü
                      </h2>
                      <p style={{ margin: '4px 0 0 0', fontSize: '16px', opacity: 0.8, color: '#4caf50' }}>
                        „ÉÅ„Ç±„ÉÉ„Éà„Éö„Éº„Ç∏„Å´ÁßªÂãï‰∏≠...
                      </p>
                    </div>
                  </div>
                ) : (
                  <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                    <div style={{ 
                      fontSize: '48px',
                      background: 'linear-gradient(135deg, #f44336, #d32f2f)',
                      borderRadius: '50%',
                      padding: '16px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center'
                    }}>
                      ‚ùå
                    </div>
                    <div>
                      <h2 style={{ 
                        margin: 0, 
                        color: '#d32f2f',
                        fontSize: '28px',
                        fontWeight: 'bold'
                      }}>
                        QR„Ç≥„Éº„ÉâË™≠„ÅøÂèñ„Çä„Ç®„É©„Éº
                      </h2>
                      <p style={{ 
                        margin: '4px 0 0 0', 
                        fontSize: '16px', 
                        opacity: 0.8,
                        color: '#f44336'
                      }}>
                        Invalid QR Code
                      </p>
                    </div>
                  </div>
                )}
              </div>
              
              <div className="overlay-body">
                <div style={{ 
                  fontSize: '18px', 
                  margin: '0 0 24px 0', 
                  lineHeight: '1.6',
                  textAlign: 'center',
                  color: '#333'
                }}>
                  {redirectResult.message}
                </div>
                
                {!redirectResult.success && (
                  <div style={{ 
                    textAlign: 'center',
                    background: '#f8f9fa',
                    padding: '20px',
                    borderRadius: '12px',
                    border: '2px dashed #dee2e6'
                  }}>
                    <div style={{ fontSize: '16px', marginBottom: '16px', color: '#666' }}>
                      „Éõ„Éº„É†„Éö„Éº„Ç∏„Å´Êàª„Çä„Åæ„Åô
                    </div>
                    <div style={{ 
                      fontSize: '32px', 
                      fontWeight: 'bold', 
                      color: '#d32f2f',
                      background: '#ffebee',
                      borderRadius: '50%',
                      width: '70px',
                      height: '70px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      margin: '0 auto',
                      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                      border: '3px solid #f44336'
                    }}>
                      {countdown}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* ‰ΩøÁî®ÊñπÊ≥ïÔºàÁµêÊûúË°®Á§∫‰∏≠„ÅØÈùûË°®Á§∫Ôºâ */}
        {!redirectResult && !processing && (
          <div className="info-card">
            <h3 style={{ color: '#333', marginBottom: '16px' }}>üé´ QR„Ç≥„Éº„Éâ„É™„Éº„ÉÄ„Éº</h3>
            <div style={{ color: '#666', lineHeight: '1.8' }}>
              <p><strong>1.</strong> „Ç´„É°„É©„ÅåËá™ÂãïÁöÑ„Å´Ëµ∑Âãï„Åó„Åæ„Åô</p>
              <p><strong>2.</strong> „ÉÅ„Ç±„ÉÉ„Éà„ÅÆQR„Ç≥„Éº„Éâ„Çí„Ç´„É°„É©„Å´Âêë„Åë„Çã</p>
              <p><strong>3.</strong> Ëá™ÂãïÁöÑ„Å´„ÉÅ„Ç±„ÉÉ„Éà„Éö„Éº„Ç∏„Å´ÈÅ∑Áßª„Åó„Åæ„Åô</p>
              <p><strong>4.</strong> „ÉÅ„Ç±„ÉÉ„ÉàË©≥Á¥∞„Éö„Éº„Ç∏„ÅßÂÖ•Â†¥Âá¶ÁêÜ„ÅåË°å„Çè„Çå„Åæ„Åô</p>
              <p style={{ color: '#2e7d32', fontWeight: 'bold', marginTop: '12px' }}>
                ‚úÖ „ÉÅ„Ç±„ÉÉ„Éà„Éö„Éº„Ç∏„ÅßÂÖ•Â†¥Áä∂Ê≥Å„ÅåÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

